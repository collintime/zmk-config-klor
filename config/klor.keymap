//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp Z>;
            label = "UNDO";
        };

        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_SHIFT &kp Z>;
            label = "REDO";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RCTRL &kp X>;
            label = "CUT";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp V>;
            label = "PASTE";
        };
    };

    behaviors {
        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 5 6 7 8 9 16 17 18 19 20 30 31 32 33 34 41 42 43 38 37 36>;
            require-prior-idle-ms = <150>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <41 42 43 38 37 36 0 1 2 3 4 11 12 13 14 15 23 24 25 26 27>;
            require-prior-idle-ms = <150>;
        };

        lt: lt {
            compatible = "zmk,behavior-hold-tap";
            label = "LT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┌───────────────────────────────────────────────────────────┐

            label = "BASE";

            // └───────────────────────────────────────────────────────────┘
            /*           ┌─────────┬─────────┬─────────┬─────────┬─────────┐                    ┌─────────┬─────────┬─────────┬─────────┬─────────┐
             │    Q    │    W    │    F    │    P    │    G    │                    │    J    │    L    │    U    │    Y    │    ;    │   
   ┌─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤                    ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┐
   │   TAB   │    A    │    R    │    S    │    T    │    D    │                    │    H    │    N    │    E    │    I    │    O    │    "    │
   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤╭────────╮╭────────╮├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
   │   DEL   │    Z    │    X    │    C    │    V    │    B    ││  MUTE  ││PLY/PSE ││    K    │    M    │    ,    │    .    │    /    │    \    │
   └─────────┴─────────┴─────────┼─────────┼─────────┼─────────┼╰────────╯╰────────╯┼─────────┼─────────┼─────────┼─────────┴─────────┴─────────┘
                                 │  CTRL   │  LOWER  │  SPACE  │   ALT   ││ CMD/WIN │  ENTER  │  RAISE  │  BSPCE  │  
                                 └─────────┴─────────┴─────────┴─────────┘└─────────┴─────────┴─────────┴─────────┘ */

            bindings = <
       &kp Q               &kp W              &kp E                  &kp R                &kp T                         &kp Y         &kp U                 &kp I                  &kp O               &kp P
&none  &hrm_l LEFT_META A  &hrm_l LEFT_ALT S  &hrm_l LEFT_CONTROL D  &hrm_l LEFT_SHIFT F  &kp G                         &kp H         &hrm_r RIGHT_SHIFT J  &hrm_r LEFT_CONTROL K  &hrm_r RIGHT_ALT L  &hrm_r RIGHT_META SEMICOLON  &none
&none  &kp Z               &kp X              &kp C                  &kp V                &kp B         &trans  &trans  &kp N         &kp M                 &kp COMMA              &kp DOT             &kp FSLH                     &none
                                              &lt 1 ESCAPE           &lt 2 BACKSPACE      &lt 3 DELETE  &none   &none   &lt 4 RETURN  &lt 5 SPACE           &lt 6 TAB
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        media_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans                  &trans      &trans            &trans        &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &kp K_PREVIOUS    &kp C_VOL_DN  &kp C_VOLUME_UP  &kp K_NEXT  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans            &trans        &trans           &trans      &trans
                        &trans  &trans  &trans  &trans  &trans  &kp K_STOP  &kp K_PLAY_PAUSE  &kp K_MUTE
            >;
        };

        nav_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans                  &redo           &paste         &copy         &cut       &undo
&trans  &trans  &trans  &trans  &trans  &trans                  &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp CAPS  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &trans    &trans
                        &trans  &trans  &trans  &trans  &trans  &trans          &trans         &trans
            >;
        };

        mouse_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans                  &trans          &trans          &trans        &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans        &trans           &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &mkp MB2        &mkp MB1        &mkp MB3
            >;
        };

        sym_layer {
            bindings = <
        &kp LEFT_BRACKET  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACKET                  &trans  &trans  &trans  &trans  &trans
&trans  &kp SEMICOLON     &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE         &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp BACKSLASH      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS          &trans  &trans  &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
        &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                              &trans        &kp NUMBER_0  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        fun_layer {
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
